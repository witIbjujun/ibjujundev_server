<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
        
<mapper namespace="com.wit.inspaction.user.mapper.UserMapper">

	<!-- 사전점검 항목 리스트 조회 -->
	<select id="selectCategoryList" parameterType="java.util.HashMap" resultType="UserDTO">
		SELECT  category_id AS categoryId
		        , category_nm AS categoryNm
		        , detail  
		        , imagePath
                , COALESCE(count, 0) count
                , (SELECT COUNT(sllr_no) FROM wit_sllr000t WHERE service_item = A.category_id) companyCnt
        FROM  category A 
        WHERE  A.END_DATE = '99991231'
        
       <if test="categoryId != null and categoryId.trim() != ''">
        AND category_id = #{categoryId}
   		</if>
       <if test="type != null and type.trim() != ''">
        AND package LIKE CONCAT('%', #{type}, '%');
   		</if>
   		
	</select>

	<!-- 사전점검 항목 리스트 조회 -->
	<select id="userCheckCount" parameterType="java.util.HashMap" resultType="int">
		SELECT COUNT(clerk_no) CNT
        FROM  IBJ_PRSN000T 
        WHERE clerk_no = #{clerkNo}
	</select>

	<!-- 사전점검 항목 리스트 조회 -->
	<select id="selectCountGonguReqCount" parameterType="java.util.HashMap" resultType="int">
         SELECT (limit_count - req_count) AS remaining_count
        FROM IBJ_CTGR100T
        WHERE ctgr_id =  #{categoryId}
        AND apt_no = #{aptNo}
        FOR UPDATE
	</select>
	
	<!--  2. req_count 증가 -->
    <update id="updateReqCount" parameterType="java.util.HashMap">
        UPDATE IBJ_CTGR100T
        SET req_count = req_count + 1
        WHERE ctgr_id = #{categoryId}
         AND apt_no = #{aptNo}
    </update>
    
		<!-- 사전점검 항목 리스트 조회 -->
	<select id="userCheckKakaoCount" parameterType="java.util.HashMap" resultType="int">
		SELECT COUNT(clerk_no) CNT
        FROM  IBJ_PRSN000T 
        WHERE  sns_id = #{kakaoId}
	</select>
	
	
	<!-- 사전점검 상세항목 리스트 조회 -->
	<select id="selectCompanyList" parameterType="java.util.HashMap" resultType="UserDTO">
		SELECT service_item categoryId
		     ,sllr_no companyId
		     ,rate
		     ,store_name companyNm
		FROM wit_sllr000t 
		WHERE service_item = #{categoryId}
	</select>
	
	<!-- 사전점검 상세항목 리스트 조회 -->
	<select id="selectCompanyIdList" parameterType="java.util.HashMap" resultType="java.lang.String">
		SELECT A.sllr_no companyId
		FROM wit_sllr000t A , sllr100t B
		WHERE A.sllr_no = B.sllr_no
		AND  A.service_item =#{categoryId}
		AND B.apt_no = #{aptNo}
		AND A.end_date ='99991231'
		AND B.end_date ='99991231' 

	</select>
	
	<!-- 사전점검 상세항목 리스트 조회 -->
	<select id="selectGongGuCompanyIdList" parameterType="java.util.HashMap" resultType="java.lang.String">
		SELECT a.sllr_no
		FROM  IBJ_CTGR100T a , wit_sllr000t b 
		where a.sllr_no = b.sllr_no 
        and  a.ctgr_id = #{categoryId}
        and b.BIZ_CERTIFICATION  = '03' 
		and a.apt_no = #{aptNo}
		and a.end_date = '99991231'
	</select>
	
	<!-- 사전점검 상세항목 리스트 조회 -->
	<select id="generateReqNo" parameterType="java.util.HashMap" resultType="String">
		SELECT CONCAT(#{reqGubun}, DATE_FORMAT(SYSDATE(), '%Y%m%d'), 
		        LPAD(COALESCE(MAX(req_no_num) + 1, 1), 5, '0')) AS req_no
		FROM (
		    SELECT CAST(SUBSTRING(req_no, 10) AS UNSIGNED) AS req_no_num
		    FROM request100t
		    WHERE req_date >= CURDATE()
		) AS derived
	</select>
	
	<!-- 사전점검 상세항목 리스트 조회 -->
	<select id="selectRequestDetailList" parameterType="java.util.HashMap" resultType="UserDTO">
		SELECT A.REQ_NO reqNo
			  ,A.REQ_USER
		      ,A.REQ_DATE reqDate
		      ,A.REQ_CONTENTS reqContents
		      ,B.sllr_no companyId
		      ,A.CATEGORY_ID categoryId
		      ,B.REQ_STATE   reqState
		      ,B.reqStateNm
			  , (SELECT category_nm FROM category WHERE category_id = A.category_id) AS categoryNm 
		      , (SELECT RATE FROM wit_sllr000t WHERE service_item = A.category_id AND sllr_no = B.sllr_no) AS rate
		      , B.store_name companyNm
		      , DATE_FORMAT(A.REQ_DATE, '%c월 %e일') AS reqDateInfo
		      , B.SEQ
		      , B.finishCount
		      , B.estimateAmount
		      , B.estimateContents
              , B.file_path imageFilePath
               , DATE_FORMAT(B.estimate_date, '%Y.%m.%d') AS estimateDate
		FROM request100t A ,(
							SELECT     AA.sllr_no
                              ,BB.req_no
                              ,BB.category_id
                              ,BB.company_id
                              ,BB.seq
							 , AA.store_name
                             , BB.END_DATE
                             ,(SELECT COUNT(company_id) FROM request110t WHERE COMPANY_ID = AA.sllr_no AND req_state ='70')  finishCount
							 , (select CONCAT(FILE_LOC,FILE_ID)   from wit_file000t  where BIZ_CD = 'SR01'   and BIZ_KEY = AA.sllr_no  and file_seq ='1' ) FILE_PATH
							 , BB.estimate_amount estimateAmount
							 , BB.estimate_contents estimateContents
							 , BB.REQ_STATE
							 , BB.estimate_date
							 , DATE_FORMAT(BB.REQ_DATE, '%c월 %e일') AS reqDateInfo
							 ,(SELECT CD_NM FROM wit_code000t WHERE CD_CLS = 'EST01' AND CD = BB.REQ_STATE )  reqStateNm
					FROM wit_sllr000t AA , request110t BB 
					WHERE AA.sllr_no = BB.COMPANY_ID
					AND BB.END_DATE = '99991231'
					AND BB.REQ_STATE  !='10'
					AND BB.REQ_NO = #{reqNo}
        
        ) B
		WHERE A.REQ_NO = B.REQ_NO
		AND  A.CATEGORY_ID = A.CATEGORY_ID 
	    AND A.REQ_USER  = #{reqUser}	
		AND A.CATEGORY_ID = #{categoryId}	
		AND A.REQ_NO = #{reqNo}
		ORDER BY A.REQ_DATE DESC 
	</select>
	
	<!-- 공동구매 목록 -->
	<select id="selectGonguList" parameterType="java.util.HashMap" resultType="UserDTO">
		SELECT A.ctgr_id categoryId
		      ,A.ctgr_nm categoryNm
		      ,A.ctgr_dtl_txt detail
		      ,A.img_path imagePath   
		      ,B.gp_start_date  gpStartDate /*공동구매시작일*/
		      ,CASE WHEN DATEDIFF(B.gp_end_date, CURDATE()) > 0 
		            THEN CONCAT('D-', DATEDIFF(B.gp_end_date, CURDATE())) 
		            ELSE '종료됨'   END AS gpEndDate  /*공동구매 종료일*/
		      ,B.gp_stat gpStat  /*진행상태: 공동구매 진행중 / 조기마감 / 매진*/
		      ,B.limit_count limitCount /*최대수량*/
		      ,B.req_count reqCount /*요청수량*/
		      ,B.sale_rate saleRate /*할인율%*/
		      ,B.sale_amt saleAmt   /*할인된 금액*/
              ,C.req_state reqState
		FROM IBJ_CTGR000T A
        LEFT JOIN IBJ_CTGR100T B  
        ON  A.ctgr_id = B.ctgr_id 
        LEFT OUTER JOIN (
					select b.req_state
						  ,b.req_no
                          ,b.category_id
					from request100t a , request110t b
					where a.req_no = b.REQ_NO
					and a.req_gubun  = 'G'
					  AND b.req_user = #{reqUser}) C 
		ON  A.ctgr_id  = C.category_id
        WHERE  A.end_date = '99991231'
		AND  B.end_date = '99991231'
		 AND  B.apt_no = #{aptNo}
	</select>
	
	<!-- 사전점검 견적전 리스트 조회 -->
	<select id="selectRequesAsistList" parameterType="java.util.HashMap" resultType="UserDTO">
	SELECT  A.req_no AS reqNo,
		    CONCAT(LEFT(A.REQ_NO, 1), SUBSTRING(A.REQ_NO, 2, 8), '-', CAST(SUBSTRING(A.REQ_NO, 10) AS UNSIGNED)) AS formatReqNo,
		    MIN(A.CATEGORY_ID) AS categoryId, 
		    CASE 
		        WHEN MIN(A.req_gubun) = 'T' THEN 
		        
		          (  CASE WHEN MIN(A.type) = 'S' THEN "Simple 인테리어" 
		                  WHEN MIN(A.type) = 'T' THEN "Standard 인테리어" 
		                  WHEN MIN(A.type) = 'P' THEN "Premium 인테리어" 
		                  ELSE "My Choice 인테리어" END )
		        ELSE (SELECT category_nm FROM category WHERE category_id = MIN(A.category_id))
		    END AS categoryNm,
		    (SELECT COUNT(*) 
		     FROM request110t 
		     WHERE req_no = A.req_no
		       AND req_state !=10) AS companyCnt,
		    (SELECT CD_NM FROM wit_code000t WHERE CD_CLS = 'EST01'    AND CD =  (
		             SELECT max(req_state)
		             FROM request110t 
		             WHERE req_no = A.req_no
		        )) AS estimateContents,
		        	(SELECT max(req_state)
		             FROM request110t 
		             WHERE req_no = A.req_no) reqState ,
		    DATE_FORMAT(MIN(A.REQ_DATE), '%c월 %e일') AS reqDateInfo, 
		    MIN(A.req_gubun) AS reqGubun,
		    MIN(A.req_state) AS reqState,
		   ( SELECT GROUP_CONCAT(category_nm SEPARATOR ' / ')
		                  FROM category
		                  WHERE category_id IN (
		                    SELECT category_id
		                    FROM request100t
		                    WHERE req_no = A.req_no
		                  )) selCategoryNm,
		  MIN(A.req_contents) reqContents,
	        CASE
		        WHEN TIMESTAMPDIFF(SECOND, A.REQ_DATE, NOW()) <![CDATA[<=]]> 10 THEN '방금 전'
		        WHEN TIMESTAMPDIFF(SECOND, A.REQ_DATE, NOW()) <![CDATA[<]]> 60 THEN CONCAT(TIMESTAMPDIFF(SECOND, A.REQ_DATE, NOW()), '초 전')
		        WHEN TIMESTAMPDIFF(MINUTE, A.REQ_DATE, NOW()) <![CDATA[<]]> 60 THEN CONCAT(TIMESTAMPDIFF(MINUTE, A.REQ_DATE, NOW()), '분 전')
		        WHEN TIMESTAMPDIFF(HOUR, A.REQ_DATE, NOW()) <![CDATA[<]]> 24 THEN CONCAT(TIMESTAMPDIFF(HOUR, A.REQ_DATE, NOW()), '시간 전')
		        ELSE CONCAT(TIMESTAMPDIFF(DAY, A.REQ_DATE, NOW()), '일 전')
    		END AS timeAgo
	FROM request100t A
	WHERE A.req_user =  #{reqUser}	
	GROUP BY A.req_no
	ORDER BY MIN(A.REQ_DATE) DESC
	</select>
	
	
	<!--알림 리스트 조회 -->
	<select id="selectAptPyoungList" parameterType="java.util.HashMap" resultType="UserDTO">
		SELECT apt_no mainAptNo
	      ,apt_pyoung mainAptPyoung
	      ,apt_type type
	      ,real_price price
	      ,updown_gbn updownGubun
	FROM IBJ_APT100T
	WHERE apt_no = #{aptNo}	
	AND end_date = '99991231'
	ORDER BY apt_pyoung 
	</select>
	
	<!--토근 리스트 조회 -->
	<select id="selectTokenList" parameterType="java.util.HashMap" resultType="UserDTO">
	SELECT token 
	FROM IBJ_PRSN000T 
	WHERE clerk_no IN (

	SELECT clerk_no
	FROM wit_sllr000t
	WHERE sllr_no IN 
	
		<foreach item="item" collection="companyIds" open="(" separator="," close=")">
	        #{item}
	    </foreach>
    )
	</select>
	
	<!--토근 리스트 조회 -->
	<select id="selectReqTokenList" parameterType="java.util.HashMap" resultType="UserDTO">
		SELECT A.token 
		FROM IBJ_PRSN000T A , request110t B
		WHERE A.clerk_no = B.req_user 
		AND B.REQ_NO = #{reqNo}	
		AND B.SEQ = #{seq}	
	</select>
	
	<!--알림 리스트 조회 -->
	<select id="selectNoticeList" parameterType="java.util.HashMap" resultType="UserDTO">
		SELECT      AA.sllr_no 
                  , BB.req_no reqNo
                  , BB.category_id categoryId
                  , BB.company_id companyId
                  , BB.seq 
                  , BB.REQ_DATE  reqDate
				  , AA.store_name companyNm
                  , BB.END_DATE
				  , (SELECT CONCAT(FILE_LOC,FILE_ID)   FROM wit_file000t  where BIZ_CD = 'SR01'   AND BIZ_KEY = AA.sllr_no  AND file_seq ='1' ) FILE_PATH
				  , BB.estimate_amount estimateAmount
				  , BB.estimate_contents estimateContents
				  , BB.REQ_STATE reqState
				  , DATE_FORMAT(BB.REQ_DATE, '%c월 %e일') AS reqDateInfo
			 	  , CASE
		            WHEN TIMESTAMPDIFF(SECOND, BB.REQ_DATE, NOW()) <![CDATA[<=]]> 10 THEN '방금 전'
		            WHEN TIMESTAMPDIFF(SECOND, BB.REQ_DATE, NOW()) <![CDATA[<]]> 60 THEN CONCAT(TIMESTAMPDIFF(SECOND, BB.REQ_DATE, NOW()), '초 전')
		            WHEN TIMESTAMPDIFF(MINUTE, BB.REQ_DATE, NOW()) <![CDATA[<]]> 60 THEN CONCAT(TIMESTAMPDIFF(MINUTE, BB.REQ_DATE, NOW()), '분 전')
		            WHEN TIMESTAMPDIFF(HOUR, BB.REQ_DATE, NOW()) <![CDATA[<]]> 24 THEN CONCAT(TIMESTAMPDIFF(HOUR, BB.REQ_DATE, NOW()), '시간 전')
		            ELSE CONCAT(TIMESTAMPDIFF(DAY, BB.REQ_DATE, NOW()), '일 전')
		       END AS timeAgo  
				,(SELECT CD_NM FROM wit_code000t WHERE CD_CLS = 'EST01' AND CD = BB.REQ_STATE )  reqStateNm
		FROM wit_sllr000t AA , request110t BB 
		WHERE AA.sllr_no = BB.COMPANY_ID
		AND BB.REQ_USER = #{reqUser}	
		AND BB.END_DATE = '99991231'
		AND BB.REQ_STATE != '10'
	ORDER BY BB.REQ_DATE DESC
	
	</select>
	
	<!--알림 리스트 조회 -->
	<select id="selectUserInfo" parameterType="java.util.HashMap" resultType="UserDTO">
	 SELECT A.clerk_no AS clerkNo,
		       A.sns_id AS kakaoId,
		       A.role AS role,
		       A.nick_name AS nickName,
		       A.apt_no AS mainAptNo,
		       A.email ,
		       C.sllr_no AS sllrNo,
		       TT.mainAptNm
		FROM IBJ_PRSN000T A
		LEFT JOIN (
		    SELECT AA.apt_no,
		           BB.apt_pyoung,
		           BB.apt_type,
		           BB.sale_price,
		           BB.updown_gbn,
		           AA.apt_name,
		           CONCAT(AA.apt_name, ' ', BB.apt_pyoung, '평') AS mainAptNm
		    FROM IBJ_APT000T AA
		    JOIN IBJ_APT100T BB
		      ON AA.apt_no = BB.apt_no
		    WHERE AA.end_date = '99991231'
		      AND BB.end_date = '99991231'
		) TT
		ON A.apt_no = TT.apt_no
	   AND A.apt_pyoung = TT.apt_pyoung
      LEFT OUTER JOIN wit_sllr000t C
       ON A.clerk_no = C.clerk_no
       AND C.end_date = '99991231'
	    <where>
		    <trim prefixOverrides="AND">
		      
		      <if test="clerkNo != null and clerkNo != ''">
		        AND A.clerk_no = #{clerkNo}
		      </if>
		      
		      <if test="(clerkNo == null or clerkNo == '') and kakaoId != null and kakaoId != ''">
		        AND A.sns_id = #{kakaoId}
		      </if>
		      
		    </trim>
		  </where>

	</select>
	
	<!--알림 리스트 조회 -->
	<select id="selectAptList" parameterType="java.util.HashMap" resultType="java.util.Map">
		SELECT apt_no aptNo
		       ,apt_name aptName
		FROM IBJ_APT000T 
		WHERE end_date = '99991231'	
	</select>
	
	<!--알림 리스트 조회 -->
	<select id="selectMyAptList" parameterType="java.util.HashMap" resultType="java.util.Map">
		SELECT a.apt_no aptNo
		       ,a.apt_name aptName
		FROM IBJ_APT000T a , IBJ_PRSN000T b
		WHERE a.apt_no = b.apt_no
        AND  b.clerk_no = #{clerkNo}
        AND  a.end_date = '99991231'
	</select>
	
	<!-- 사전점검 항목 저장 -->
	<insert id="insertRequestInfo" parameterType="java.util.HashMap">
	INSERT INTO request100t (
        req_no,
        company_id,
        category_id,
        APT_NO,
        req_gubun,
        req_user,
        req_date,
        req_state,
        req_contents,
        seq
    ) 
    VALUES (
    
     <selectKey keyProperty="reqNo" resultType="string" order="BEFORE">
         (SELECT CONCAT(#{reqGubun}, DATE_FORMAT(SYSDATE(), '%Y%m%d'), 
                LPAD(COALESCE(MAX(req_no_num) + 1, 1), 5, '0')
        )
        FROM (
            SELECT CAST(SUBSTRING(req_no, 10) AS UNSIGNED) AS req_no_num
            FROM request100t
            WHERE req_date >= CURDATE()
        ) AS derived)
    </selectKey>
    
       #{reqNo}, 
        #{companyId},
        #{categoryId},
         #{aptNo},
        #{reqGubun},  
        #{reqUser}, 
        SYSDATE(),  
        #{reqState},     
        #{reqContents},        
        #{seq}
    )
	</insert>
	
	<!-- 사전점검 항목 저장 -->
	<update id="updateRequestState" parameterType="java.util.HashMap">
		UPDATE request100t
		  SET req_state = #{reqState}
		     ,END_REASON = #{endReason}
		     ,UPDATE_DT =  SYSDATE() 
		     ,UPDATE_USER = #{reqUser}
		WHERE REQ_NO =   #{reqNo}
	</update>
	<!-- 사전점검 항목 저장 -->
	<update id="updateDetailRequestState" parameterType="java.util.HashMap">
		UPDATE request110t
		  SET req_state = #{reqState}
		     ,estimate_amount = #{estimateAmount}
		     ,estimate_contents = #{estimateContents}
		     ,UPDATE_DT =  SYSDATE() 
		     ,UPDATE_USER = #{reqUser}
		WHERE REQ_NO =   #{reqNo}
		AND SEQ =  #{seq}
	</update>
	
	<!-- 사전점검 항목 저장 -->
	<update id="updateUserInfo" parameterType="java.util.HashMap">
		UPDATE IBJ_PRSN000T
		  SET nick_name = #{nickName}
		   <if test="aptNo != null and aptNo != ''">
	            ,apt_no = #{aptNo}
	        </if>
		   <if test="pyoung != null and pyoung != ''">
		      ,apt_pyoung = #{pyoung}
	        </if>
		     ,udt_date =  SYSDATE() 
		     ,udt_user = #{clerkNo}
	    <trim prefix="WHERE" prefixOverrides="AND |OR">
	        <if test="kakaoId != null and kakaoId != ''">
	            sns_id = #{kakaoId}
	        </if>
	        <if test="clerkNo != null and clerkNo != ''">
	            AND clerk_no = #{clerkNo}
	        </if>
    	</trim>
	</update>
	
	<!-- 사전점검 항목 저장 -->
	<update id="updateTokenOnServer" parameterType="java.util.HashMap">
		UPDATE IBJ_PRSN000T
		  SET token = #{token}
		     ,udt_date =  SYSDATE() 
		     ,udt_user = #{clerkNo}
     <if test="kakaoId != null and kakaoId != ''">
		WHERE sns_id = #{kakaoId}	
	</if>
	<if test="clerkNo != null and clerkNo != ''">
		WHERE clerk_no = #{clerkNo}
	</if>
	</update>
	
	<!-- 사전점검 항목 저장 -->
	<insert id="insertHistoryRequest" parameterType="java.util.HashMap">
	INSERT INTO request110t (
        REQ_NO,
        SEQ,
        END_DATE,
        company_id,
        category_id,
        req_user,
        req_date,
        req_state,
        req_contents,
        estimate_date,
        estimate_amount,
        estimate_contents        
    ) 
    VALUES (
        #{reqNo},
        #{seq},
        '99991231',
        #{companyId},
        #{categoryId},
        #{reqUser}, 
        SYSDATE(),  
        #{reqState},     
        #{reqContents},
        STR_TO_DATE(#{expectedDate}, '%Y%m%d'),  
        #{estimateAmount},
        #{estimateContents}
                
    )
	</insert>
	
	<!-- 유저등록 -->
	<insert id="insertUserInfo" parameterType="java.util.HashMap">
		
		 <selectKey keyProperty="clerkNo" resultType="String" order="BEFORE">
        	SELECT IFNULL(MAX(CAST(clerk_no AS UNSIGNED)), 0) + 1
        	FROM IBJ_PRSN000T
  		  </selectKey>
		INSERT INTO IBJ_PRSN000T (
		    clerk_no, 
		    sns_id, 
		    login_sns_type,
		    email,
		    agree_gbn,
		    agree_date,
		    role, 
		    nick_name, 
		    user_name, 
		    apt_no,
		    apt_pyoung,
		    end_date, 
		    reg_user, 
		     reg_date, 
		    img_path,
		    token
		) VALUES (
		      #{clerkNo},
		      #{kakaoId},
		      #{loginSnsType},
		      #{email},
		       #{agreeGbn},
		        NOW(),
		      #{role},
		      #{nickName},
		      #{name},
		      #{aptNo},
		      #{pyoung},
		      '99991231',
		      #{reqUser}, 
		      SYSDATE(),
		      #{profileImageUrl},
		      #{token}
		)
	</insert>
	
	<!-- 사전점검 항목 저장 -->
	<insert id="insertTotalRequestInfo" parameterType="java.util.HashMap">
	INSERT INTO request100t (
        req_no,
        company_id,
        category_id,
        APT_NO,
        req_gubun,
        type,
        req_user,
        req_date,
        req_state,
        req_contents
    ) 
    VALUES (
       #{reqNo},
        #{companyId},
        #{categoryId},
        #{aptNo},
        #{reqGubun},  
        #{type},  
        #{reqUser}, 
        SYSDATE(),  
        #{reqState},     
        #{reqContents}   
    )
	</insert>
	
	
</mapper>